def populate_entry_trend(self):

        print("initiate populate_entry_trend")
        df = self.df
        df = df.copy()

        df['signal'] = None
        #adx_cond = (((df['minus_di'] > df['plus_di']) & (df['atr'] < df['atr_sma']))|
        #            ((df['minus_di'] < df['plus_di']) & (df['atr'] > df['atr_sma'])))
        #rsi_cond = ((df['rsi'] < 35) | (df['rsi'] > df['rsi_sma']) | df['bull_div_rsi_15'] == True)
        #macd_cond = (df['macd_line'] > df['macd_signal'])
        
        #consolidation = myTA.diff_percentage(df['close'], local_min)  
        #consolidation_condition1 = ((consolidation > 0) & (consolidation < (df['atr'] * 3 )))
        
        price_action_bull =  df['price_action_bull_15']

        bearish_lqs = (df['EQH'].rolling(15).sum() == False)
        candle_bullish = myTA.candlectick_confirmation(df, 'long')
        low_tf_zones = (df['bullish_fvg_reaction'] |  df['bullish_ob_reaction'] | df['bullish_breaker_reaction']   )
        additional_check=   (   price_action_bull |  df['bullish_lqs'] | df['EQL']) 
        local_min = df['low'].rolling(15).min() 
        df['local_min'] = local_min
        sl_atr = local_min - df['atr']
        df['sl_atr'] = sl_atr
        df['double_HH_15'] = (df['close'] + ((df['HH_15'] - df['close']) * 2)   )

        last_low = df['low'].rolling(5).min()
        low_guard = df['close'] - last_low < df['atr']
        
        HTF_zones = (df['bullish_fvg_is_in_H1'] |  df['bullish_ob_is_in_H1'] 
                    |df['bullish_breaker_is_in_H1'] | df['bullish_gap_is_in']
                    |df['bullish_GPG_is_in_H1'] |  df['bullish_GPL_is_in_H1']   )

        entries = [[] for _ in range(len(df))]
        levels = [[] for _ in range(len(df))]

        zone_names_H1 = ['bullish_fvg_is_in_H1', "bullish_breaker_is_in_H1",'bullish_GPG_is_in_H1','bullish_GPL_is_in_H1','bullish_gap_is_in']
        zone_names = ['bullish_fvg_reaction', "bullish_ob_reaction","bullish_breaker_reaction"]
        levels_names = ["bullish_lqs_H1","bullish_mons_reaction_H1"]

        for i, row in df.iterrows():
            
            for zone in zone_names:
                if row.get(zone) and  additional_check[i] and price_action_bull[i]  and low_guard[i] and bearish_lqs[i]  :
                    tag = zone.replace("bullish_", "").replace("_reaction", "").upper()
                    direction = "long" if "bullish" in zone else "short"

                    # Poziom strefy (np. bullish_fvg_low)
                    zone_base = zone.replace("_reaction", "_low") if "bullish" in zone else zone.replace("_reaction", "_high")

                    # Upewnij się, że kolumna istnieje
                    zone_level = row.get(zone_base)
                    if zone_level is None:
                        print(f"⚠️ Brak kolumny: {zone_base} w df")
                        continue
                    # Dodanie sygnału wejścia
                    entries[i].append(("enter", direction, tag))

                    # Kandydaci na poziomy
                    level_options = {
                        "tag": tag,
                        "sl_candidates": [("zone_level", zone_level),("sl_atr", row["sl_atr"])],
                        "tp1_candidates": [("HH_15", row["HH_15"]), ("TP1_ATR", row["close"] + row["atr"])],
                        "tp2_candidates": [("HH_15_H1", row["HH_15_H1"]),("double_HH_15", row["double_HH_15"]), ("RR_3", row["close"] + 5 * row["atr"])]
                    }
                    # Dodanie poziomów
                    levels[i].append(level_options)
                    

            for zone_H1 in zone_names_H1:
                if row.get(zone_H1) and additional_check[i] and candle_bullish[i] :
                    tag = zone_H1.replace("bullish_", "").replace("_reaction", "").upper()
                    direction = "long" if "bullish" in zone_H1 else "short"

                    # Poziom strefy (np. bullish_fvg_low)
                    zone_base = zone_H1.replace("_reaction", "_low") if "bullish" in zone_H1 else zone_H1.replace("_reaction", "_high")

                    # Upewnij się, że kolumna istnieje
                    zone_level = row.get(zone_base)
                    if zone_level is None:
                        print(f"⚠️ Brak kolumny: {zone_base} w df")
                        continue
                    # Dodanie sygnału wejścia
                    entries[i].append(("enter", direction, tag))

                    # Kandydaci na poziomy
                    level_options = {
                        "tag": tag,
                        "sl_candidates": [("zone_level", zone_level),("sl_atr", row["sl_atr"])],
                        "tp1_candidates": [("HH_15", row["HH_15"]), ("TP1_ATR", row["close"] +  row["atr"])],
                        "tp2_candidates": [("HH_15_H1", row["HH_15_H1"]),("double_HH_15", row["double_HH_15"]), ("RR_3", row["close"] + 3 * row["atr"])]
                    }
                    # Dodanie poziomów
                    levels[i].append(level_options)
            """
            for zone in levels_names:
                if row.get(zone) and additional_check[i] and candle_bullish[i]:
                    tag = zone.replace("reaction", "")  # np. bullish_fvg_
                    tag = zone.replace("bullish", "B")  # np. bullish_fvg_
                    direction = "long" if "bullish" in zone else "short"

                    # Poziom strefy (np. bullish_fvg_low)
                    zone_base = zone.replace("_reaction", "_low") if "bullish" in zone else zone.replace("_reaction", "_high")

                    # Dodanie sygnału wejścia
                    entries[i].append(("enter", direction, tag))

                    # Kandydaci na poziomy
                    level_options = {
                        "tag": tag,
                        "sl_candidates": [("last_low_15", row["local_min"]),("sl_atr", row["sl_atr"])],
                        "tp1_candidates": [("HH_15", row["HH_15"]), ("TP1_ATR", row["close"] + row["atr"])],
                        "tp2_candidates": [("HH_15_H1", row["HH_15_H1"]), ("RR_3", row["close"] + 5 * row["atr"])]
                    }
                    # Dodanie poziomów
                    levels[i].append(level_options)"""



        # Przykładowe dodawanie sygnałów (rozwiń wg potrzeb)
        #add_signal(df['bullish_ob_reaction'] & additional_check & price_action_bull, ("enter", "long", "OB_"))


        def safe_merge_signals(signals):
            if not signals:
                return None
            return merge_signals(signals)

        df["signal"] = [merge_signals(e) for e in entries]
        df["levels"] = [
        merge_levels(
            levels[i], 
            direction=[s[1] for s in entries[i] if s[0] == "enter"][0],  # np. 'long' lub 'short'
            close_price=df.loc[i, "close"]) if entries[i] else None for i in range(len(df))] 

        #long = {PA__PA_H1__MAD_ : PA__C__MAU_}

        self.df = df